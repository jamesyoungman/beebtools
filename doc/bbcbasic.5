.TH "BBC BASIC" 5 2020-05-05 Youngman \" -*- nroff -*-

.SH SYNOPSIS
Some implementations of BBC BASIC store saved programs in a tokenised
format.  In some cases, notably the MOS 6502 implementation by Acorn
used on the original BBC Microcomputer, this is similar to (or,
perhaps, the same as) the in-memory representation of the program once
loaded.

.SH "BBC BASIC DIALECTS"

There are a number of variants of the BBC BASIC language.  These vary
in both the facilities offered (the ARM version has a richer set of
keywords for example) and in how the programs are represented (there
are differences in both tokenisation and how lines are recorded).

The dialects described in this document are

.TS
tab(|) allbox;
lb lb lb
l l l
l l s
l l l
l l l
l l l
l l l
l l s.
Dialect|Line Number|Tokenisation
6502|Big-endian|No extension codes
32016|Identical to 6502
ARM|Big-endian|Extension codes 0xC6, 0xC7, 0xC8
Mac|Big-endian|Extension codes 0xC6, 0xC7, 0xC8
Windows|Little-endian|T{
No extension codes, bytes <= 0x10 different
T}
Z80|Little-endian|No extension codes
8086|Identical to Z80
.TE

Although both ARM and Mac use extension codes, the keywords encoded
with them are not always the same.

There are also some other implementations of BBC BASIC.  R. T
Russell's Windows implementation and his BBC BASIC for SDL 2.0 (which
runs on many platforms, including Linux and Mac OS X) use the same
encoding.  Brandy BASIC can read BBC BASIC programs in the 6502
format, but it saves programs as text files.  Matrix Brady BASIC also
supports the Z80 format, but likewise saves its BASIC program files as
text.

This document deals mainly with how the BBC BASIC language is
represented in its saved form.  This is somewhat separate from
the question of which keywords are supported.  For example, BBC BASIC
IV was introduced with the BBC Master and introduced the
.B TIME$
keyword.  BASIC V (introduced on the Archimedes computer) introduced
many new keywords (for example
.BR WHILE / ENDWHILE ).

.SH FILE FORMAT

A BBC BASIC file is encoded as a sequence of program lines.  The
format of these lines varies between implementations.

Some dialects record lines of code with a leading ASCII Carriage
Return, others with a length byte first.  These formats also differ in
the ordering of the bytes making up the line number (hence the names
"Big-endian" for the files which start with Carriage Return and
"Little-endian" for the ones which don't).  Some dialects allow line
numbers to be omitted.  When this is the case they are encoded as line
number 0.

Some dialects also use some byte values as "extension codes" which
introduce a multi-byte token representation.

.TS
tab(|) allbox;
lb lb lb lb
l  l  l  l.
Type|Dialects|Line Format|EOF marker
Big-endian|6502, 32016, ARM, Mac|0x0D <hi> <lo> <len> data...|0x0D 0xFF
Little-endian|Z80, 8086, Windows|<len> <lo> <hi> data... 0x0D|0x00 0xFF
.TE

The length byte encodes the total number of bytes in the line,
including the 0x0D.

Both line-encoding systems use the same general scheme for
tokenization, though the various dialects support a slightly different
set of tokens.  Each line is a sequence of zero or more of the
following:

.TP
\(bu
Single-byte tokens
.TP
\(bu
Double-byte "extension" tokens (ARM and Mac only) where the first byte
is 0xC6, 0xC7 or 0xC8 and the following byte identifies the token.
.TP
\(bu
"Fast Variables" (Windows and SDL only) consisting of a byte
between 0x11 and 0x1F inclusive, followed by two additional "index" bytes.
.TP
\(bu
Characters within strings (enclosed by 0x22, ASCII double quote)
.TP
\(bu
Non-string characters (such as colons, characters which make up
variable names, and so forth).  These simply represent themselves.

Some keywords are represented by "compound tokens"; see
.BR "COMPOUND TOKENS" .
Some compound tokens (for example
.BR LISTO )
occupy three bytes: a two-byte extension token (in this case 0xC7
0c95) followed by a byte representing an ASCII character (here, 0x4F).

.SS "Big-endian Line Format"

In big-endian files, all lines including the first begin with a CR
character (hex 0x0D).  This is followed by the two bytes of line
number (high byte first), the length of the line and then the line
contents.  Line number 25610 would be encoded as 0x64 (decimal 100)
followed by 0x0A (decimal 10).  The <len> value counts all the bytes,
so for example this line

.EX
0x0D 0x00 0x0A 0x05 0xF1
.EE

has a line number of 10 and includes just the token 0x0F1 representing
"PRINT":

.EX
10 PRINT
.EE

.SS "Little-endian Line Format"

In little-endian files, all lines begin with a length byte.  This is
followed by two bytes of line number (low byte first), the line length
followed by a number of token bytes implied by the line length.  After
that, the following byte must be the 0x0D marking the end of the line.

The line

.EX
0x05 0x00 0x0A 0xF5 0x0D
.EE

has a line number of 10 and includes just the token 0xF5 representing "REPEAT":

.EX
10 REPEAT
.EE


.SS "Alternative Interpretation"

Another way to visualize the file format is to consider the big-endian
format to use Carriage-Return as an initial file marker, leaving all
the rest of the lines
.I terminated
by Carriage-Return:

.TS
tab(|) allbox;
lb lb lb s  lb
^  ^  lb lb ^
l l l l l.
Type|T{
File Head
.br
Marker Byte
T}|File body is a sequence of:|T{
EOF
.br
Marker
T}
||Length/Line Number|Line Content
Big-endian|0x0D|<hi><lo><len>|data... 0x0D|0xFF
Little-endian||<len><lo><hi>|data... 0x0D|0x00 0xFF
.TE


.SH END OF FILE

End-of-file is represented slightly differently in the two line
encoding systems.

In big-endian files, end-of-file is encoded as 0x0D 0xFF.  By
implication, the highest representable line number would be 65279
decimal.

In little-endian files, end-of-file is encoded as the line 0x00 0xFF
0xFF.  Normally the length byte would include the line number bytes,
but not in this case. The highest representable line number would be
65535 decimal.

Nothing should be read after the end-of-file marker (even though some
files do include additional bytes).

.SH TOKENISATION

Strings are represented as a double quote followed by the literal
content of the string then a final double quote.  Strings can contain
non-ASCII characters but these are not expanded as if they are tokens.
For example a string can contain the byte 0x85 but this should not be
expanded to
.BR ERROR .
Instead it should be understood to the literal byte 0x85.  Programs
sometimes contain such bytes in strings because when printed they have
an effect in Mode 7 (in this case,
.IR "alpha magenta" ).
Some implementations support UTF-8 in strings. No change to the
file format is needed for this.

Within a string, a double-quote (ASCII 0x22) can be escaped by
doubling it.  This makes a difference for parsing, but not for simple
deserialisation (a quoted double-quote looks exactly like two
double-quotes in a row, since that's what it is).

Outside strings, bytes are either tokens or part of a line number
(see
.BR "LINE NUMBERS" ).

.SS "Single-Byte Tokens 0x00 ... 0x10"

Most of these tokens are valid only in the Windows dialect:

.TS
tab(|) allbox;
lb ab lb lb lb lb
l  c  s  s  s  s  
l  c  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l
l  cb s  s  s  s
l  c  s  s  s  l
l  ^  s  s  s  l
l  ^  s  s  s  l.
Byte|6502|Z80|ARM|Mac|Windows
0x00|\fIinvalid\fP
0x01|\fIall invalid\fP|"CIRCLE"
0x02|\fIall invalid\fP|"ELLIPSE"
0x03|\fIall invalid\fP|"FILL"
0x04|\fIall invalid\fP|"MOUSE"
0x05|\fIall invalid\fP|"ORIGIN"
0x06|\fIall invalid\fP|"QUIT"
0x07|\fIall invalid\fP|"RECTANGLE"
0x08|\fIall invalid\fP|"SWAP"
0x09|\fIall invalid\fP|"SYS"
0x0A|\fIall invalid\fP|"TINT"
0x0B|\fIall invalid\fP|"WAIT"
0x0C|\fIall invalid\fP|"INSTALL"
0x0D|Line start or end depending on dialect
0x0E|\fIall invalid\fP|"PRIVATE"
0x0F|\fIall invalid\fP|"BY"
0x10|\fIall invalid\fP|"EXIT"
.TE

.SS "Bytes 0x11 ... 0x17"

These bytes represent themselves (within a string or not).

.SS "Bytes 0x18 ... 0x1f: Windows/SDL Fast Variables"

In dialects other than Windows (or its synonym, SDL), these bytes
represent themseleves, within a string or not.  In Windows/SDL these
bytes represent "fast variables":

.TS
tab(|) allbox;
lb lb lb
l  l  l.
Bytes|Expansion|Significance
0x18 xx yy|FN/PROC|
0x19 xx yy|v&|unsigned integer 8 bits
0x1A xx yy|v%|signed integer 32 bits
0x1B xx yy|v#|double 64 bits
0x1C xx yy|v|variant numeric 80 bits
0x1D xx yy|v{}|structure
0x1E xx yy|v%%|signed integer 64 bits
0x1F xx yy|v$|string
.TE

Each of these byte values is followed by a two-byte "index" value
(represented by "xx yy" above).

.SS "Bytes 0x20 ... 0x7E"

These bytes just represent themselves.

.SS "Bytes 0x7f ... 0x8C"

The token 0x7F is valid only on ARM and Mac, where if expands to
"OTHERWISE".

.TS
tab(|) allbox;
lb lb lb lb lb lb
l  c  s  c  s  l
l  c  s  s  s  s.
Byte|6502|Z80|ARM|Mac|Windows
0x7F|\fIinvalid\fP|"OTHERWISE"|\fIinvalid\fP
0x80|"AND"
0x81|"DIV"
0x82|"EOR"
0x83|"MOD"
0x84|"OR"
0x85|"ERROR"
0x86|"LINE"
0x87|"OFF"
0x88|"STEP"
0x89|"SPC"
0x8A|"TAB("
0x8B|"ELSE"
0x8C|"THEN"
.TE

.SS "Byte 0x8D: Line Numbers"

The byte 0x8D introduces a line number (for example after
.BR GOTO );
see
.BR "LINE NUMBERS" .

.SS "Token 0x8E"

.TS
tab(|) allbox;
lb cb s  s  s  s
^  lb lb lb lb lb
l  c  s  s  s  s.
Byte|All Dialects Identical
|6502|Z80|ARM|Mac|Windows
0x8E|"OPENIN"
.TE


.SS "Single-Byte Tokens 0x8F..0x93: Pseudo-Variable Right Tokens"

These tokens represent pseudo-variables in contexts wheir their value
is being used (as opposed to contexts where they are the target of an
assignment).

.TS
tab(|) allbox;
lb cb s  s  s  s
^  lb lb lb lb lb
l  c  s  s  s  s.
Byte|All Dialects Identical
|6502|Z80|ARM|Mac|Windows
0x8F|"PTR"
0x90|"PAGE"
0x91|"TIME"
0x92|"LOMEM"
0x93|"HIMEM"
.TE

.SS "Single-Byte Tokens 0x94..0x9F"

.TS
tab(|) allbox;
lb cb s  s  s  s
^  lb lb lb lb lb
l  c  s  s  s  s.
Byte|All Dialects Identical
|6502|Z80|ARM|Mac|Windows
0x94|"ABS"
0x95|"ACS"
0x96|"ADVAL"
0x97|"ASC"
0x98|"ASN"
0x99|"ATN"
0x9A|"BGET"
0x9B|"COS"
0x9C|"COUNT"
0x9D|"DEG"
0x9E|"ERL"
0x9F|"ERR"
.TE

.SS "Single-Byte Tokens 0xA0..0xC5"
.TS
tab(|) allbox;
lb cb s  s  s  s
^  lb lb lb lb lb
l  c  s  s  s  s.
Byte|All Dialects Identical
|6502|Z80|ARM|Mac|Windows
0xA0|"EVAL"
0xA1|"EXP"
0xA2|"EXT"
0xA3|"FALSE"
0xA4|"FN"
0xA5|"GET"
0xA6|"INKEY"
0xA7|"INSTR("
0xA8|"INT"
0xA9|"LEN"
0xAA|"LN"
0xAB|"LOG"
0xAC|"NOT"
0xAD|"OPENUP"
0xAE|"OPENOUT"
0xAF|"PI"
.TE

.\" There is a break between tables here just to ensure each table can
.\" fit on one page.

.TS
tab(|) allbox;
lb cb s  s  s  s
^  lb lb lb lb lb
l  c  s  s  s  s.
Byte|All Dialects Identical
|6502|Z80|ARM|Mac|Windows
0xB0|"POINT("
0xB1|"POS"
0xB2|"RAD"
0xB3|"RND"
0xB4|"SGN"
0xB5|"SIN"
0xB6|"SQR"
0xB7|"TAN"
0xB8|"TO"
0xB9|"TRUE"
0xBA|"USR"
0xBB|"VAL"
0xBC|"VPOS"
0xBD|"CHR$"
0xBE|"GET$"
0xBF|"INKEY$"
0xC0|"LEFT$("
0xC1|"MID$("
0xC2|"RIGHT$("
0xC3|"STR$"
0xC4|"STRING$("
0xC5|"EOF"
.TE

.SS "Byte 0xC6: Extension Tokens"

In the ARM and Mac dialects the 0xC6 byte introduces an extension
mechanism and the following byte identifies the expansion.  In other
dialects, the 0xC6 by itself is interpreted as a token, and the
following byte is some other token.

.TS
tab(|) allbox;
lb lb lb lb lb lb
l  c  s c  s l
l  c  s c  s l
l  ^  s c  s ^
l  ^  ^ l  l ^
l  ^  ^ ^  l ^.
Bytes|6502|Z80|ARM|Mac|Windows
0xC6|"AUTO"|\fIExtension, see below\fP|"SUM"
0xC6 0x8E|T{
.I Interpreted
.br
.I separately
T}|"SUM"|T{
.I Interpreted
.br
.I separately
T}
0xC6 0x8F||"BEAT"
0xC6 0x90|||T{
.I All
.br
.I invalid
T}|"ASK"
0xC6 0x91||||"ANSWER"
0xC6 0x92||||"SFOPENIN"
0xC6 0x93||||"SFOPENOUT"
0xC6 0x94||||"SFOPENUP"
0xC6 0x95||||"SFNAME$"
0xC6 0x96||||"MENU"
.TE

.SS "Byte 0xC7: Extension Tokens"

In the ARM and Mac dialects, the 0xC7 byte introduces an extension
mechanism, and the next byte identifies the expansion:

.TS
tab(|) allbox;
lb lb lb lb lb lb
l  c  s  c  s  l
l  c  s  c  s  l
l  ^  ^  c  s  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  l  ^
l  ^  ^  l  ^  ^.
Bytes|6502|Z80|ARM|Mac|Windows
0xC7|"DELETE"|\fIExtension, see below\fP|"WHILE"
0xC7 0x8E|T{
.I Interpreted
.br
.I separately
T}|"APPEND"|T{
.I Interpreted
.br
.I separately
T}
0xC7 0x8F|||"AUTO"
0xC7 0x90|||"CRUNCH"|"DELETE"
0xC7 0x91|||"DELETE"|"EDIT"
0xC7 0x92|||"EDIT"|"HELP"
0xC7 0x93|||"HELP"|"LIST"
0xC7 0x94|||"LIST"|"LOAD"
0xC7 0x95|||"LOAD"|"LVAR"
0xC7 0x96|||"LVAR"|"NEW"
0xC7 0x97|||"NEW"|"OLD"
0xC7 0x98|||"OLD"|"RENUMBER"
0xC7 0x99|||"RENUMBER"|"SAVE"
0xC7 0x9A|||"SAVE"|"TWIN"
0xC7 0x9B|||"TEXTLOAD"|"TWINO"
0xC7 0x9C|||"TEXTSAVE"|\fIinvalid\fP
0xC7 0x9D|||"TWIN"
0xC7 0x9E|||"TWINO"
0xC7 0x9f|||"INSTALL"
.TE

.SS "Byte 0xC8: Extension Tokens"

In the ARM and Mac dialects, the 0xC8 byte introduces an extension
mechanism, while in 6502 and Z80 0xC8 is expanded by itself to
"LOAD").  Similarly for Windows (where it expands to "CASE"):

.TS
tab(|) allbox;
lb lb lb lb lb lb
l  c s c s l
l  c s c s l
l  ^ s c s ^.
Bytes|6502|Z80|ARM|Mac|Windows
0xC8|"LOAD"|Extension|"CASE"
0xC8 0x8E|T{
.I interpreted
.br
.I separately
T}|"CASE"|T{
.I interpreted
.br
.I separately
T}
0xC8 0x8F||"CIRCLE"
0xC8 0x90||"FILL"
0xC8 0x91||"ORIGIN"
0xC8 0x92||"POINT"
0xC8 0x93||"RECTANGLE"
0xC8 0x94||"SWAP"
0xC8 0x95||"WHILE"
0xC8 0x96||"WAIT"
0xC8 0x97||"MOUSE"
0xC8 0x98||"QUIT"
0xC8 0x99||"SYS"
0xC8 0x9A||"INSTALL"
0xC8 0x9B||"LIBRARY"
0xC8 0x9C||"TINT"
0xC8 0x9D||"ELLIPSE"
0xC8 0x9E||"BEATS"
0xC8 0x9F||"TEMPO"
0xC8 0xA0||"VOICES"
0xC8 0xA1||"VOICE"
0xC8 0xA2||"STEREO"
0xC8 0xA3||"OVERLAY"
0xC8 0xA4||"MANDEL"
0xC8 0xA5||"PRIVATE"
0xC8 0xA6||"EXIT"
.TE

.SS "Single-Byte Tokens 0xC9 ... 0xCE"

Bytes in this range are interpreted as follows:

.TS
tab(|) allbox;
lb cb cb cb cb cb
l  c  s  c  s  s
l  c  s  c  s  s
l  c  s  c  s  s
l  c  s  c  s  c
l  c  s  c  s  s
l  c  c  c  s  s.
Byte|6502|Z80|ARM|Mac|Windows
0xC9|"LIST"|"WHEN"
0xCA|"NEW"|"OF"
0xCB|"OLD"|"ENDCASE"
0xCC|"RENUMBER"|"ELSE"|"OTHERWISE"
0xCD|"SAVE"|"ENDIF"
0xCE|"EDIT"|"PUT"|"ENDWHILE"
.TE

.SS "Single-Byte Tokens 0xCF ... 0xD3: Pseudo-Variable left tokens"

These tokens represent pseudo-variables when they are being assigned
to (i.e. are on the left of an equals sign).

.TS
tab(:) allbox;
lb cb s   s   s   s
^ cb cb  cb  cb  cb
l  c  s   s   s   s.
Byte:All Dialects Identical
:6502:Z80:ARM:Mac:Windows
0xCF:"PTR"
0xD0:"PAGE"
0xD1:"TIME"
0xD2:"LOMEM"
0xD3:"HIMEM"
.TE

.SS "Single-Byte Tokens 0xD4 ... 0xFF"
.TS
tab(:) allbox;
lb cb s  s  s  s
^ cb cb  cb  cb  cb
l  c  s   s   s   s.
Byte:All Dialects Identical
:6502:Z80:ARM:Mac:Windows
0xD4:"SOUND"
0xD5:"BPUT"
0xD6:"CALL"
0xD7:"CHAIN"
0xD8:"CLEAR"
0xD9:"CLOSE"
0xDA:"CLG"
0xDB:"CLS"
0xDC:"DATA"
0xDD:"DEF"
0xDE:"DIM"
0xDF:"DRAW"   
.TE

.\" There is a break between tables here just to ensure each table can
.\" fit on one page.

.TS
tab(:) allbox;
lb cb cb  cb  cb  cb
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
l  c  s   s   s   s
^  c  c   c   c   c
l  c  s   s   s   s.
Byte:6502:Z80:ARM:Mac:Windows
0xE0:"END"
0xE1:"ENDPROC"
0xE2:"ENVELOPE"
0xE3:"FOR"
0xE4:"GOSUB"
0xE5:"GOTO"
0xE6:"GCOL"
0xE7:"IF"
0xE8:"INPUT"
0xE9:"LET"
0xEA:"LOCAL"
0xEB:"MODE"
0xEC:"MOVE"
0xED:"NEXT"
0xEE:"ON"
0xEF:"VDU"
0xF0:"PLOT"
0xF1:"PRINT"
0xF2:"PROC"
0xF3:"READ"
0xF4:"REM"
0xF5:"REPEAT"
0xF6:"REPORT"
0xF7:"RESTORE"
0xF8:"RETURN"
0xF9:"RUN"
0xFA:"STOP"
0xFB:"COLOUR"
0xFB:-:-:-:"COLOR":-
0xFC:"TRACE"
0xFD:"UNTIL"
0xFE:"WIDTH"
0xFF:"OSCLI"
.TE

The byte value 0xFB encodes the keyword
.BR COLOUR .
Some dialects (for example Mac) also accept
.B COLOR
when a program is being entered but this is "corrected" to
.BR COLOUR .

.SH "COMPOUND ENCODINGS"

A number of keywords are encoded using a pair of tokens or an ASCII
suffix to a token.  Here are some examples:

.TS
tab(|) allbox;
lb lb lb lb
l  l  l  l.
Dialect|Bytes|Keyword|Representation
All|0xB8 0x50|"TOP"|"TO" P
All|0xD1 0x24|"TIME$"|"TIME" $
All|0xCF 0x23|"PTR#"|"PTR" #
All|0xF6 0x24|"REPORT$"|"REPORT" $
ARM|0x8E 0xA9|"SUMLEN"|"SUM" "LEN"
Windows|0xC6 0xA9|"SUMLEN"|"SUM" "LEN"
Mac|0xC7 0x93 0x24|"LIST$"|"LIST" $
ARM|0xC7 0x94 0x4F|"LISTO"|"LIST" O
ARM|0xC7 0x92 0x4F|"EDITO"|"EDIT" O
.TE

In implementations where the saved format is the same as the in-memory
format, leading context is needed to correctly interpret the byte
stream, for example to distinguish the variable
.B TOP
from
.B TO P
in
.BR FORI=1TOP .

.SH "LINE NUMBERS"

Line numbers at the start of a line are encoded as exactly two bytes.
Within a file, they are consistently represented high byte first
(6502, 32016, ARM and Mac) or low byte first (Z80, 8086, Windows).

Within the rest of the line, they are represented differently. They
are introduced by the byte value 0x8D and (counting the 0x8D) always
occupy four bytes.  These line numbers are encoded in such a way that
they can be decoded as if with the following C expression (b1, b2 and
b3 are the three unsigned bytes of the line number which follow the
0x8D marker byte):

.EX
(((b3 ^  (b1 << 4)) & 0xFF) << 8) | (b2 ^ ((b1 << 2)  & 0xC0))
.EE

.SH "MAC DIALECT"
The Mac dialect described in this document is the 1987 implementation
by Human-Computer Interface Ltd.  On the basis of examination of some
sample programs, I see that the Mac dialect is similar to the ARM
dialect, but some of the extension code mappings are different.

There is also an SDL version for Mac OS X implemented by
R. T. Russell, but it uses the same dialect as his Windows
implementation.

.SH "OTHER DIALECTS"

This document describes all the formats I have been able to find
documentation for or find a usable implementation of.  There are also
BBC BASIC implementations for the PDP-11 and the 6809 CPU which I have
not obtainted, and so these are not documented here.

If you have additional information or corrections, please use the
contact information given in the
.B BUGS
section.

.SH "CORNER CASES"

There are a number of possible inputs which don't match this
description.  I don't know whether in any cases, any BBC BASIC
implementation will accept the file as a valid program, but if so this
document should be clarified to describe things in more detail.
Contributions of corrections with test cases very welcome (see
.BR BUGS ).

.TP
\(bu
Line length byte extends beyond the physical end-of-file.
.TP
\(bu
Physical EOF is reached without a preceding EOF marker
.TP
\(bu
Program line ends in the middle of a byte sequence encoding a line
number
.TP
\(bu
For big-endian files, line length byte is within a reasonable range
but the character following the end of the line is not 0x0D.  For
little-endian files, the final character of the line is not 0x0D.
.TP
\(bu
Out-of-order line numbers
.TP
\(bu
It's possible that not all implementations support the full range of
theoretically-representable line numbers.

.SH "SEE ALSO"
\fBbbcbasic_to_text\fP(1)

http://www.rtrussell.co.uk/

http://mdfs.net/Docs/Comp/BBCBasic/Tokens

http://mdfs.net/Docs/Comp/BBCBasic/Line

.SH BUGS
Please report inaccuracies or other defects in this document to
james@youngman.org.
